title: 'Disambiguation of "Emerson" mentions in sentences (Entity Linking)'
description: "**This project was created as part of a [step-by-step video tutorial](https://www.youtube.com/watch?v=8u57WSXVpmw).** It uses [spaCy](https://spacy.io)'s entity linking functionality and [Prodigy](https://prodi.gy) to disambiguate \"Emerson\" mentions in text to unique identifiers from Wikidata. As an example use-case, we consider three different people called Emerson: [an Australian tennis player](https://www.wikidata.org/wiki/Q312545), [an American writer](https://www.wikidata.org/wiki/Q48226), and a [Brazilian footballer](https://www.wikidata.org/wiki/Q215952). [See here](https://github.com/explosion/projects/tree/master/nel-emerson) for the previous scripts for spaCy v2.x."
# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  name: "nel_emerson"
  config: "nel"
  vectors: "en_vectors_web_model"
  data: "emerson_annotated_text.jsonl"
  entities: "entities.csv"
  kb: "my_kb"
  nlp_1: "my_nlp"
  nlp_2: "my_nlp_el"
  test: "test_set.pkl"
  version: "0.0.1"

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "training", "configs", "scripts", "corpus", "notebooks"]

# Assets that should be downloaded or available in the directory. We're shipping
# some of them with the project, so they won't have to be downloaded. But the
# 'project assets' command still lets you verify that the checksums match.
assets:
  - dest: "assets/${vars.data}"
    description: "The annotated data"
    checksum: "2863586d7b648536f84280648ab32490"
  - dest: "assets/${vars.entities}"
    description: "The entities in the knowledge base"
    checksum: "f24d983db0cd3d180a135bbbbb0d0b8a"
  - dest: "assets/emerson_input_text.txt"
    description: "The original input text"
    checksum: "b5bc61375680396017337e3ebe830ada"
  - dest: "assets/en-vectors-web.tgz"
    description: "Vectors to initialize the model"
    url: "https://github.com/explosion/projects/releases/download/en-vectors-web/v2.2_en-vectors-web.tgz"

# Workflows are sequences of commands (see below) executed in order. You can
# run them via "spacy project run [workflow]". If a commands's inputs/outputs
# haven't changed, it won't be re-run.`
workflows:
  all:
    - data
    - vectors
    - kb
    - train
    - evaluate

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:
  - name: data
    help: "Extract the vectors data"
    script:
      - "tar -xzf ./assets/en-vectors-web.tgz -C ./assets/"
    deps:
      - "assets/en-vectors-web.tgz"
    outputs_no_cache:
      - "assets/en-vectors-web/lexemes.jsonl"
      - "assets/en-vectors-web/vectors.npz"

  - name: vectors
    help: "Create a vectors model"
    script:
      - "python -m spacy init-model en ./assets/${vars.vectors} -j ./assets/en-vectors-web/lexemes.jsonl -v ./assets/en-vectors-web/vectors.npz -V 20000"
    deps:
      - "assets/en-vectors-web/lexemes.jsonl"
      - "assets/en-vectors-web/vectors.npz"
    outputs_no_cache:
      - "assets/${vars.vectors}"

  - name: kb
    help: "Create the Knowledge Base in spaCy and write it to file"
    script:
      - "python ./scripts/create_kb.py ./assets/${vars.entities} ./assets/${vars.vectors} ./training/${vars.kb} ./training/${vars.nlp_1}/"
    deps:
      - "assets/${vars.vectors}"
      - "assets/${vars.entities}"
    outputs_no_cache:
      - "training/${vars.kb}"
      - "training/${vars.nlp_1}"

  - name: train
    help: "Train a new Entity Linking component"
    script:
      - "python ./scripts/train_el.py ./assets/${vars.data} ./training/${vars.kb} ./training/${vars.nlp_1}/ ./training/${vars.nlp_2}/ ./corpus/${vars.test}" # ./configs/{CONFIG}.cfg
    deps:
      - "assets/${vars.data}"
      - "training/${vars.kb}"
      - "training/${vars.nlp_1}"
    outputs_no_cache:
      - "training/${vars.nlp_2}"
      - "corpus/${vars.test}"

  - name: evaluate
    help: "Evaluate on the test data and print the results"
    script:
      - "python ./scripts/evaluate.py ./training/${vars.nlp_2}/ ./corpus/${vars.test}"
    deps:
      - "training/${vars.nlp_2}"
      - "corpus/${vars.test}"

  # These are additional custom commands that are not run as part of the main
  # "run" list. They can depend on third-party libraries etc. Here are just
  # some examples of what's possible.
  - name: setup
    help: Install dependencies
    script:
      - "python -m pip install -r requirements.txt"
    deps:
      - "requirements.txt"
