import os
import typer
import tempfile
import tarfile
import shutil
import json
from huggingface_hub import Repository, HfApi, HfFolder

token_classification_components = ["ner", "tagger", "morphologizer"]
text_classification_components = ["textcat", "textcat_multilabel"]


def list_tags(name, tags):
    if tags is None:
        return ""
    if isinstance(tags, str):
        tags = [tags]
    if len(tags) == 0:
        return ""
    name_tags = [f"- {tag}" for tag in tags]
    return f"{name}:\n" + "\n".join(name_tags) + "\n"

def create_model_card(repo_dir):
    with open(os.path.join(repo_dir, "meta.json")) as f:
        data = json.load(f)
        lang = data["lang"] if data["lang"] != "xx" else "multilingual"
        lic = data["license"].replace(" ", "-")
        tags = ["spacy"]
        for component in data["components"]:
            if component in token_classification_components and "token-classification" not in tags:
                tags.append("token-classification")
            if component in text_classification_components and "text-classification" not in tags:
                tags.append("text-classification")

        metadata = list_tags("tags", tags)
        metadata += list_tags("language", lang)
        metadata += list_tags("license", lic)
        metadata_section = f"---\n{metadata}---\n"

        # Read README generated by package
        readme_path = os.path.join(repo_dir, "README.md")
        readme = ""
        with open(readme_path) as f:
            readme = f.read()

        with open(readme_path, "w") as f:
            f.write(metadata_section)
            f.write(readme)
        

def main(
    name: str,
    version: str,
    lang: str,
    namespace: str,
):  
    lang_and_name = f"{lang}_{name}"
    versioned_name = f"{lang_and_name}-{version}"
    package_path = os.path.join("packages", versioned_name, "dist")
    repo_local_path = os.path.join("hub", lang_and_name)

    # Create the repo (or clone its content if it's nonempty).
    repo_url = HfApi().create_repo(
            name=lang_and_name,
            token=HfFolder.get_token(),
            organization=namespace,
            private=False,
            exist_ok=True,
        )
    repo = Repository(repo_local_path, clone_from=repo_url)
    repo.lfs_track(["*.whl", "*.npz", "*strings.json", "vectors"])

    # Extract tar files to repo
    tar = tarfile.open(os.path.join(package_path, f"{versioned_name}.tar.gz"), "r:gz")
    tar.extractall(repo_local_path)

    # Move files up one directory
    extracted_dir = os.path.join(repo_local_path, versioned_name)
    for filename in os.listdir(extracted_dir):
        dst = os.path.join(repo_local_path, filename)
        if os.path.isdir(dst):
            shutil.rmtree(dst)
        elif os.path.isfile(dst):
            os.remove(dst)
        shutil.move(os.path.join(extracted_dir, filename), dst)
    shutil.rmtree(os.path.join(repo_local_path, versioned_name))
    src = os.path.join(repo_local_path, f"{lang_and_name}", versioned_name)
    dst = os.path.join(repo_local_path, f"{lang_and_name}", f"{lang_and_name}")
    shutil.move(src, dst)

    # Create model card, including HF tags
    create_model_card(repo_local_path)

    # Remove version from whl filename and rename to repo name
    src_dir = os.path.join(package_path,f"{versioned_name}-py3-none-any.whl")
    dst_file = os.path.join(repo_local_path, f"{lang_and_name}-any-py3-none-any.whl")
    shutil.copyfile(src_dir, dst_file)

    repo.push_to_hub(commit_message="Spacy Update")


if __name__ == "__main__":
    try:
        typer.run(main)
    except SystemExit:
        pass
